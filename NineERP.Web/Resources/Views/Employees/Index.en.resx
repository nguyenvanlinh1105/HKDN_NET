<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EmployeeManagement" xml:space="preserve">
    <value>Employee Management</value>
    <comment/>
  </data>
  <data name="Dashboard" xml:space="preserve">
    <value>Dashboard</value>
    <comment/>
  </data>
  <data name="ConfirmDeleteTitle" xml:space="preserve">
    <value>Confirm Delete</value>
    <comment/>
  </data>
  <data name="ConfirmDeleteText" xml:space="preserve">
    <value>Are you sure you want to delete this employee?</value>
    <comment/>
  </data>
  <data name="ConfirmChangeStatusTitle" xml:space="preserve">
    <value>Confirm Change Status</value>
    <comment/>
  </data>
  <data name="ConfirmChangeStatusText" xml:space="preserve">
    <value>Do you want to lock/unlock this employee?</value>
    <comment/>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
    <comment/>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
    <comment/>
  </data>
  <data name="Active" xml:space="preserve">
    <value>Active</value>
    <comment/>
  </data>
  <data name="Block" xml:space="preserve">
    <value>Blocked</value>
    <comment/>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
    <comment/>
  </data>
  <data name="Add New" xml:space="preserve">
    <value>Add New</value>
    <comment/>
  </data>
  <data name="Number" xml:space="preserve">
    <value>No.</value>
    <comment/>
  </data>
  <data name="Avatar" xml:space="preserve">
    <value>Avatar</value>
    <comment/>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
    <comment/>
  </data>
  <data name="FullName" xml:space="preserve">
    <value>Full Name</value>
    <comment/>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Status</value>
    <comment/>
  </data>
  <data name="Created Date" xml:space="preserve">
    <value>Created Date</value>
    <comment/>
  </data>
  <data name="Action" xml:space="preserve">
    <value>Action</value>
    <comment/>
  </data>
  <data name="FullName, Email..." xml:space="preserve">
    <value>Full Name, Email...</value>
    <comment/>
  </data>
  <data name="Employee No" xml:space="preserve">
    <value>Employee No</value>
    <comment/>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
    <comment/>
  </data>
  <data name="Position" xml:space="preserve">
    <value>Position</value>
    <comment/>
  </data>
  <data name="Department" xml:space="preserve">
    <value>Department</value>
    <comment/>
  </data>
  <data name="Contract Type" xml:space="preserve">
    <value>Contract Type</value>
    <comment/>
  </data>
  <data name="Total Employees" xml:space="preserve">
    <value>Total Employees</value>
    <comment/>
  </data>
  <data name="Official Employees" xml:space="preserve">
    <value>Official Employees</value>
    <comment/>
  </data>
  <data name="Probation Employees" xml:space="preserve">
    <value>Probation Employees</value>
    <comment/>
  </data>
  <data name="Interns" xml:space="preserve">
    <value>Interns</value>
    <comment/>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit</value>
    <comment/>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
    <comment/>
  </data>
  <data name="NoRecordsFound" xml:space="preserve">
    <value>No records found.</value>
    <comment/>
  </data>
  <data name="LoadStatisticsFailed" xml:space="preserve">
    <value>Failed to load employee statistics.</value>
    <comment/>
  </data>
  <data name="Search name..." xml:space="preserve">
    <value>Search name...</value>
    <comment/>
  </data>
  <data name="Saving" xml:space="preserve">
    <value>Saving...</value>
    <comment/>
  </data>
  <data name="SelectOption" xml:space="preserve">
    <value>Select an option</value>
    <comment/>
  </data>
  <data name="Check" xml:space="preserve">
    <value>Check</value>
    <comment/>
  </data>
  <data name="InvalidFourDigits" xml:space="preserve">
    <value>Invalid - must be 4 digits</value>
    <comment/>
  </data>
  <data name="NumberExists" xml:space="preserve">
    <value>Number already exists</value>
    <comment/>
  </data>
  <data name="SomethingWentWrong" xml:space="preserve">
    <value>Something went wrong.</value>
    <comment/>
  </data>
  <data name="FullNameRequired" xml:space="preserve">
    <value>Full name is required.</value>
    <comment/>
  </data>
  <data name="EmailRequired" xml:space="preserve">
    <value>A valid email is required.</value>
    <comment/>
  </data>
  <data name="PhoneInvalid" xml:space="preserve">
    <value>Phone number must be 8-15 digits.</value>
    <comment/>
  </data>
  <data name="ContractToInvalid" xml:space="preserve">
    <value>Contract To must be after Contract From.</value>
    <comment/>
  </data>
  <data name="Valid" xml:space="preserve">
    <value>Valid</value>
    <comment/>
  </data>
  <data name="CheckEmployeeNoFailed" xml:space="preserve">
    <value>Check employee number failed</value>
    <comment/>
  </data>
  <data name="CheckEmployeeNoRequestFailed" xml:space="preserve">
    <value>Failed to check employee number.</value>
    <comment/>
  </data>
  <data name="CheckContractNoFailed" xml:space="preserve">
    <value>Check contract number failed</value>
    <comment/>
  </data>
  <data name="CheckContractNoRequestFailed" xml:space="preserve">
    <value>Failed to check contract number.</value>
    <comment/>
  </data>
  <data name="ExportToExcel" xml:space="preserve">
    <value>Export to Excel</value>
    <comment/>
  </data>
  <data name="ImportFromExcel" xml:space="preserve">
    <value>Import from Excel</value>
    <comment/>
  </data>
  <data name="DeleteSelected" xml:space="preserve">
    <value>Delete selected</value>
    <comment/>
  </data>
  <data name="AddNewEmployee" xml:space="preserve">
    <value>Add new employee</value>
    <comment/>
  </data>
  <data name="NoEmployeeSelected" xml:space="preserve">
    <value>No employee selected.</value>
    <comment/>
  </data>
  <data name="DeleteFailed" xml:space="preserve">
    <value>Delete failed.</value>
    <comment/>
  </data>
  <data name="LoadMore" xml:space="preserve">
    <value>Load More</value>
    <comment/>
  </data>
</root>